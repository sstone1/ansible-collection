..
.. SPDX-License-Identifier: Apache-2.0
..

:github_url: https://github.com/IBM-Blockchain/ansible-collection/edit/master/plugins/modules/certificate_authority.py


certificate_authority -- Manage a Hyperledger Fabric certificate authority
==========================================================================

.. contents::
   :local:
   :depth: 1


Synopsis
--------

Create, update, or delete a Hyperledger Fabric certificate authority by using the IBM Blockchain Platform.

This module works with the IBM Blockchain Platform managed service running in IBM Cloud, or the IBM Blockchain Platform software running in a Red Hat OpenShift or Kubernetes cluster.






Parameters
----------

  api_endpoint (optional, str, None)
    The URL for the IBM Blockchain Platform console.


  api_authtype (optional, str, None)
    ``ibmcloud`` - Authenticate to the IBM Blockchain Platform console using IBM Cloud authentication. You must provide a valid API key using *api_key*.

    ``basic`` - Authenticate to the IBM Blockchain Platform console using basic authentication. You must provide both a valid API key using *api_key* and API secret using *api_secret*.


  api_key (optional, str, None)
    The API key for the IBM Blockchain Platform console.


  api_secret (optional, str, None)
    The API secret for the IBM Blockchain Platform console.

    Only required when *api_authtype* is ``basic``.


  api_timeout (optional, integer, 60)
    The timeout, in seconds, to use when interacting with the IBM Blockchain Platform console.


  api_token_endpoint (optional, str, https://iam.cloud.ibm.com/identity/token)
    The IBM Cloud IAM token endpoint to use when using IBM Cloud authentication.

    Only required when *api_authtype* is ``ibmcloud``, and you are using IBM internal staging servers for testing.


  state (optional, str, present)
    ``absent`` - A certificate authority matching the specified name will be stopped and removed.

    ``present`` - Asserts that a certificate authority matching the specified name and configuration exists. If no certificate authority matches the specified name, a certificate authority will be created. If a certificate authority matches the specified name but the configuration does not match, then the certificate authority will be updated, if it can be. If it cannot be updated, it will be removed and re-created with the specified configuration.


  name (optional, str, None)
    The display name for the certificate authority.


  config_override (optional, dict, None)
    The configuration overrides for the certificate authority.

    See the Hyperledger Fabric documentation for available options: https://hyperledger-fabric-ca.readthedocs.io/en/release-1.4/serverconfig.html


  resources (optional, dict, None)
    The Kubernetes resource configuration for the certificate authority.


    ca (optional, dict, None)
      The Kubernetes resource configuration for the certificate authority container.


      requests (optional, str, None)
        The Kubernetes resource requests for the certificate authority container.


        cpu (optional, str, 100m)
          The Kubernetes CPU resource request for the certificate authority container.


        memory (optional, str, 200M)
          The Kubernetes memory resource request for the certificate authority container.





  storage (optional, dict, None)
    The Kubernetes storage configuration for the certificate authority.


    ca (optional, dict, None)
      The Kubernetes storage configuration for the certificate authority container.


      size (optional, str, 20Gi)
        The size of the Kubernetes persistent volume claim for the certificate authority container.


      class (optional, str, default)
        The Kubernetes storage class for the the Kubernetes persistent volume claim for the certificate authority container.




  hsm (optional, dict, None)
    The PKCS #11 compliant HSM configuration to use for the certificate authority.

    See the IBM Blockchain Platform documentation for more information: https://cloud.ibm.com/docs/blockchain?topic=blockchain-ibp-console-adv-deployment#ibp-console-adv-deployment-cfg-hsm


    pkcs11endpoint (optional, str, None)
      The HSM proxy endpoint that the certificate authority should use.


    label (optional, str, None)
      The HSM label that the certificate authority should use.


    pin (optional, str, None)
      The HSM pin that the certificate authority should use.



  zone (optional, str, None)
    The Kubernetes zone for this certificate authority.

    If you do not specify a Kubernetes zone, and multiple Kubernetes zones are available, then a random Kubernetes zone will be selected for you.

    See the Kubernetes documentation for more information: https://kubernetes.io/docs/setup/best-practices/multiple-zones/


  wait_timeout (optional, integer, 60)
    The timeout, in seconds, to wait until the certificate authority is available.









Examples
--------

.. code-block:: yaml+jinja

    



Return Values
-------------

  certificate_authority (, dict, )
    The certificate authority.


    name (, str, )
      The name of the certificate authority.


    api_url (, str, )
      The URL for the API of the certificate authority.


    operations_url (, str, )
      The URL for the operations service of the certificate authority.


    ca_url (, str, )
      The URL for the API of the certificate authority.


    ca_name (, str, )
      The certificate authority name to use for enrollment requests.


    tlsca_name (, str, )
      The certificate authority name to use for TLS enrollment requests.


    location (, str, )
      The location of the certificate authority.


    pem (, str, )
      The TLS certificate chain for the certificate authority.

      The TLS certificate chain is returned as a base64 encoded PEM.


    tls_cert (, str, )
      The TLS certificate chain for the certificate authority.

      The TLS certificate chain is returned as a base64 encoded PEM.






Status
------




- This  is not guaranteed to have a backwards compatible interface. *[preview]*


- This  is maintained by community.



Authors
~~~~~~~

- Simon Stone (@sstone1)

